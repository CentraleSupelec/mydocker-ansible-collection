---
- name: Ensure aristote dispatcher variables are set when proxy_aristote_dispatcher is true
  assert:
    that:
      - vars[item] is defined
      - vars[item] is not none
      - vars[item] | length > 0
    fail_msg: "{{ item }} must be set when proxy_aristote_dispatcher is true"
  loop:
    - aristote_dispatcher_url
    - aristote_dispatcher_token
    - aristote_dispatcher_alias
  when: proxy_aristote_dispatcher | bool

- name: Set caddy labels
  set_fact:
    caddy_labels:
      caddy_controlled_server:
      caddy_0: "(default_response)"
      caddy_0.respond: "410"
      caddy_1: "http://"
      caddy_1.import: "default_response"
      caddy_2: "https://"
      caddy_2.import: "default_response"
    caddy_aristote_dispatcher_labels:
      caddy_3: "{{ aristote_dispatcher_alias }}"
      caddy_3.tls: "{{ caddy_cert_file_target_path }} {{ caddy_key_file_target_path }}"
      caddy_3.@denied: "not client_ip {{ caddy_overlay_network_subnet }}"
      caddy_3.handle: "@denied"
      caddy_3.handle.respond: "401"
      caddy_3.reverse_proxy: "{{ aristote_dispatcher_url }}"
      caddy_3.reverse_proxy.header_up_0: Host {upstream_hostport}
      caddy_3.reverse_proxy.header_up_1: 'Authorization "Bearer {{ aristote_dispatcher_token }}"'

- name: If proxy_aristote_dispatcher, merge caddy_aristote_dispatcher_labels into caddy_labels
  set_fact:
    caddy_labels: "{{ caddy_labels | combine(caddy_aristote_dispatcher_labels) }}"
  when: proxy_aristote_dispatcher | bool

- name: Initialize network dictionary
  set_fact:
    caddy_network:
      name: "{{ caddy_overlay_network }}"

- name: Add aliases to caddy_network if proxy_aristote_dispatcher is true
  set_fact:
    caddy_network: "{{ caddy_network | combine({'aliases': [aristote_dispatcher_alias]}) }}"
  when: proxy_aristote_dispatcher | bool

- name: Remove the old caddy service
  docker_swarm_service:
    name: caddy
    state: absent

- name: Create caddy server service
  docker_swarm_service:
    name: caddy_server
    image: lucaslorentz/caddy-docker-proxy:ci-alpine
    replicas: "{{ caddy_server_replicas }}"
    labels: "{{ caddy_labels }}"
    env:
      - CADDY_DOCKER_MODE=server
      - CADDY_CONTROLLER_NETWORK={{ caddy_controller_network_subnet }}
    publish:
      - published_port: 80
        target_port: 80
        mode: ingress
      - published_port: 443
        target_port: 443
        mode: ingress
    networks:
      - "{{ caddy_network }}"
      - "{{ caddy_controller_network }}"
    mounts:
      - source: "{{ caddy_cert_file_source_path }}"
        target: "{{ caddy_cert_file_target_path }}"
        type: bind
        readonly: yes
      - source: "{{ caddy_key_file_source_path }}"
        target: "{{ caddy_key_file_target_path }}"
        type: bind
        readonly: yes
    placement:
      constraints:
        - node.role == worker
        - node.labels.caddy_server == true
      preferences:
        - spread: node.id

- name: Create a caddy config folder if it does not exist
  ansible.builtin.file:
    path: /home/ubuntu/config/caddy
    state: directory
    mode: '0755'

- name: Create caddy controller service
  docker_swarm_service:
    name: caddy_controller
    image: lucaslorentz/caddy-docker-proxy:ci-alpine
    replicas: 1
    env:
      - CADDY_DOCKER_MODE=controller
      - CADDY_CONTROLLER_NETWORK={{ caddy_controller_network_subnet }}
    networks:
      - "{{ caddy_network }}"
      - "{{ caddy_controller_network }}"
    mounts:
      - source: /var/run/docker.sock
        target: /var/run/docker.sock
        type: bind
      - source: /home/ubuntu/config/caddy
        target: /config/caddy
        type: bind
    placement:
      constraints:
        - node.role == manager
